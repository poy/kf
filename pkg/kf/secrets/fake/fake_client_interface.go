// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/poy/kf/pkg/kf/secrets/fake (interfaces: ClientInterface)

// Package fake is a generated GoMock package.
package fake

import (
	gomock "github.com/golang/mock/gomock"
	secrets "github.com/poy/kf/pkg/kf/secrets"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// FakeClientInterface is a mock of ClientInterface interface
type FakeClientInterface struct {
	ctrl     *gomock.Controller
	recorder *FakeClientInterfaceMockRecorder
}

// FakeClientInterfaceMockRecorder is the mock recorder for FakeClientInterface
type FakeClientInterfaceMockRecorder struct {
	mock *FakeClientInterface
}

// NewFakeClientInterface creates a new mock instance
func NewFakeClientInterface(ctrl *gomock.Controller) *FakeClientInterface {
	mock := &FakeClientInterface{ctrl: ctrl}
	mock.recorder = &FakeClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeClientInterface) EXPECT() *FakeClientInterfaceMockRecorder {
	return m.recorder
}

// AddLabels mocks base method
func (m *FakeClientInterface) AddLabels(arg0 string, arg1 map[string]string, arg2 ...secrets.AddLabelsOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLabels", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabels indicates an expected call of AddLabels
func (mr *FakeClientInterfaceMockRecorder) AddLabels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabels", reflect.TypeOf((*FakeClientInterface)(nil).AddLabels), varargs...)
}

// Create mocks base method
func (m *FakeClientInterface) Create(arg0 string, arg1 ...secrets.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *FakeClientInterfaceMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*FakeClientInterface)(nil).Create), varargs...)
}

// Delete mocks base method
func (m *FakeClientInterface) Delete(arg0 string, arg1 ...secrets.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *FakeClientInterfaceMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*FakeClientInterface)(nil).Delete), varargs...)
}

// Get mocks base method
func (m *FakeClientInterface) Get(arg0 string, arg1 ...secrets.GetOption) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *FakeClientInterfaceMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeClientInterface)(nil).Get), varargs...)
}

// List mocks base method
func (m *FakeClientInterface) List(arg0 ...secrets.ListOption) ([]v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *FakeClientInterfaceMockRecorder) List(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeClientInterface)(nil).List), arg0...)
}
